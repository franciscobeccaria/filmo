[{"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\App.js":"1","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\index.js":"2","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MovieCard.jsx":"3","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MovieSlider.jsx":"4","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\Header.jsx":"5","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\SearchResult.jsx":"6","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\SearchBox.jsx":"7","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\Searchbox.jsx":"8","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\StyledButton.jsx":"9","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\Main.jsx":"10","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MoviePage.jsx":"11","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\ListCheckbox.jsx":"12","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\TVPage.jsx":"13","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\ToastMessage.jsx":"14","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\redux\\store.js":"15","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\redux\\actionCreators.js":"16","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\redux\\actions.js":"17","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MediaPage.jsx":"18","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\LoginModal.jsx":"19","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MyUser.jsx":"20","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MyLists.jsx":"21","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\ListPage.jsx":"22","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\PersonCard.jsx":"23","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\TheMovieDBListPage.jsx":"24","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\Loader.jsx":"25"},{"size":1962,"mtime":1612040484733,"results":"26","hashOfConfig":"27"},{"size":168,"mtime":1611252438679,"results":"28","hashOfConfig":"27"},{"size":2045,"mtime":1611442412292,"results":"29","hashOfConfig":"27"},{"size":4639,"mtime":1612064459875,"results":"30","hashOfConfig":"27"},{"size":3603,"mtime":1612064641100,"results":"31","hashOfConfig":"27"},{"size":765,"mtime":1611536358885,"results":"32","hashOfConfig":"27"},{"size":7425,"mtime":1611076754146,"results":"33","hashOfConfig":"27"},{"size":15405,"mtime":1612064516919,"results":"34","hashOfConfig":"27"},{"size":2801,"mtime":1611895891586,"results":"35","hashOfConfig":"27"},{"size":1504,"mtime":1612064421434,"results":"36","hashOfConfig":"27"},{"size":6424,"mtime":1611442822066,"results":"37","hashOfConfig":"27"},{"size":8324,"mtime":1612064671645,"results":"38","hashOfConfig":"27"},{"size":5342,"mtime":1611202139853,"results":"39","hashOfConfig":"27"},{"size":2519,"mtime":1612067251056,"results":"40","hashOfConfig":"27"},{"size":972,"mtime":1611771586526,"results":"41","hashOfConfig":"27"},{"size":800,"mtime":1611771388509,"results":"42","hashOfConfig":"27"},{"size":157,"mtime":1611770894362,"results":"43","hashOfConfig":"27"},{"size":19175,"mtime":1612064432784,"results":"44","hashOfConfig":"27"},{"size":15487,"mtime":1612064727157,"results":"45","hashOfConfig":"27"},{"size":5994,"mtime":1612063138471,"results":"46","hashOfConfig":"27"},{"size":14683,"mtime":1612064476449,"results":"47","hashOfConfig":"27"},{"size":17995,"mtime":1612064684869,"results":"48","hashOfConfig":"27"},{"size":1520,"mtime":1612021271885,"results":"49","hashOfConfig":"27"},{"size":5858,"mtime":1612064568020,"results":"50","hashOfConfig":"27"},{"size":2737,"mtime":1612058616112,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ltit9f",{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"59"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"59"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"56"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"56"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\App.js",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\index.js",[],["112","113"],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MovieCard.jsx",[],["114","115"],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MovieSlider.jsx",["116"],"import React, {useState, useEffect} from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\n\r\nimport {Link} from 'react-router-dom'\r\n\r\nimport firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport {connect} from 'react-redux'\r\n\r\nimport MovieCard from './MovieCard'\r\nimport Loader from './Loader'\r\n\r\nconst Slider = styled.div`\r\n    display: flex;\r\n    overflow-x: auto;\r\n    overflow-y: hidden;\r\n    margin: 0 50px;\r\n    @media screen and (max-width: 640px) {\r\n        margin: 0 20px;\r\n  }\r\n    &::-webkit-scrollbar-track {\r\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        border-radius: 10px;\r\n        background-color: #f5f5f5;\r\n    }\r\n\r\n    &::-webkit-scrollbar {\r\n        width: 6px;\r\n        height: 6px;\r\n        background-color: transparent;\r\n        float: top;\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n        border-radius: 10px;\r\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        background-color: #555;\r\n    }\r\n`\r\nconst Title = styled.h4`\r\n    text-align: center;\r\n    padding: 0.5rem 0.5rem 0.5rem 0.5rem;\r\n    color: white;\r\n    font-family: var(--racing-sans-one-family);\r\n    font-size: 3rem;\r\n    width: fit-content;\r\n    transition: all 1s;\r\n    &:hover {\r\n        color: #0099ff;\r\n        transition: all 1s;\r\n    }\r\n    @media screen and (max-width: 640px) {\r\n        font-size: 2.5rem;\r\n  }\r\n`\r\n\r\nconst TitleWrapper = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n`\r\n\r\nconst MovieSlider = ({title, children, mediaType, firebaseDocId, user}) => {\r\n    const [state, setState] = useState()\r\n\r\n    useEffect(() => {\r\n        if(firebaseDocId && user !== undefined && user !== null) { \r\n            firebase.firestore().collection('users').doc(user.uid).collection('lists').doc(`${firebaseDocId}`)\r\n            .onSnapshot(function(doc) {\r\n                setState(doc.data().list)\r\n            })\r\n        /* if(firebaseDocId && firebase.auth().currentUser !== null) {\r\n            firebase.firestore().collection('users').doc(user.uid).collection('lists').doc(`${firebaseDocId}`)\r\n            .onSnapshot(function(doc) {\r\n                setState(doc.data().list)\r\n            }) */\r\n        } else if (user !== undefined) { \r\n            axios.get(`https://api.themoviedb.org/3/trending/${mediaType}/week?api_key=81d1f6291941e4cbb7818fa6c6be6f85`)\r\n            .then(resp => setState(resp.data.results))\r\n        }\r\n    }, [user/* , firebase.auth().currentUser */])\r\n\r\n    if(state !== undefined && state.length !== 0) {\r\n        return (\r\n            <div>\r\n                <TitleWrapper>\r\n                    {firebaseDocId === undefined\r\n                        ? \r\n                            <Link to={`/db/trending/${mediaType}/trends`} key={`${mediaType}-trending`}>\r\n                                <Title>\r\n                                    {`${title} >`}\r\n                                </Title>\r\n                            </Link>\r\n                        :\r\n                            <Link to={`/list/${firebaseDocId}`} key={firebaseDocId}>\r\n                                <Title>\r\n                                    {`${title} >`}\r\n                                </Title>\r\n                            </Link>\r\n                    }\r\n                    \r\n                </TitleWrapper>\r\n                <Slider>\r\n                    {children}\r\n                    {state === undefined ? <Loader/> : state.length === 0 \r\n                        ? 'Lista vacia' \r\n                        : state.map(e => \r\n                        <MovieCard \r\n                            movieTitle={mediaType === 'movie' ? e.title : e.name} \r\n                            movieSrc={e.poster_path} \r\n                            movieYear={mediaType === 'movie' ? e.release_date.slice(0, 4) : e.first_air_date.slice(0, 4)}\r\n                            link={mediaType === 'movie' ? `media/movie/${e.id}` : `media/tv/${e.id}`}\r\n                            key={`${mediaType}-${e.id}`} \r\n                        />\r\n                    )}\r\n                    {/* {state === undefined ? '' : state.length === 20 ? 'Ver más' : ''} */}\r\n                </Slider>\r\n            </div>\r\n        )\r\n    } else {\r\n        return (\r\n            <></>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return ({\r\n        user: state.user\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieSlider)","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\Header.jsx",["117","118"],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\SearchResult.jsx",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\SearchBox.jsx",["119"],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\Searchbox.jsx",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\StyledButton.jsx",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\Main.jsx",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MoviePage.jsx",["120"],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\ListCheckbox.jsx",["121"],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\TVPage.jsx",["122"],"import React, {useState, useEffect} from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\n\r\nimport StyledButton from './StyledButton'\r\nimport ListCheckbox from './ListCheckbox'\r\n\r\nconst Wrapper = styled.main`\r\n    background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(4,4,56,1) 50%, rgba(0,117,140,1) 100%);\r\n`\r\n\r\nconst MovieContainer = styled.div`\r\n    padding: 5rem 10rem 5rem 10rem;\r\n    display: flex;\r\n    width: 100%; \r\n    @media screen and (max-width: 1024px) {\r\n        flex-wrap: wrap;\r\n        display: flex;\r\n        justify-content: center;  \r\n    }\r\n    @media screen and (max-width: 770px) {   \r\n        padding: 5rem 5rem 5rem 5rem; } \r\n    @media screen and (max-width: 640px) {\r\n        padding: 3rem 3rem 3rem 3rem; } \r\n    @media screen and (max-width: 640px) {\r\n        padding: 3rem 2rem 0rem 2rem; } \r\n`\r\n\r\nconst MoviePoster = styled.div`\r\n        width: 30%; \r\n        @media screen and (max-width: 1024px) {\r\n            height: 30rem;\r\n            width: 20rem; \r\n        }\r\n        & > img {\r\n            height: 100%;\r\n            width: 100%;\r\n            object-fit: cover;\r\n        }\r\n`\r\n\r\nconst MovieInfo = styled.div`\r\n        padding: 3rem;\r\n        width: 70%; \r\n        @media screen and (max-width: 1024px) {\r\n            width: 100%; }\r\n        & .movie-info-1 {\r\n            @media screen and (max-width: 1024px) {\r\n                    width: 100%;\r\n                    display: flex;\r\n                    justify-content: center; }\r\n            & h1 {\r\n                    color: #f0f0f0;\r\n                    font-family: \"Roboto\", Arial, Helvetica, sans-serif;\r\n                    font-size: 5rem;\r\n                    margin-bottom: 2rem; \r\n                    @media screen and (max-width: 1024px) {\r\n                        font-size: 4rem;\r\n                        margin-bottom: 1.5rem; }\r\n                    @media screen and (max-width: 640px) {\r\n                        font-size: 3rem; } \r\n            }\r\n        }\r\n        & .movie-info-2 {\r\n            width: 100%;\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: 2rem; }\r\n            @media screen and (max-width: 1024px) {\r\n                width: 100%;\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n                justify-content: center; \r\n        }\r\n        & .movie-info-3 {\r\n            width: 100%;\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            margin-bottom: 2rem;\r\n            & span {\r\n                color: #f0f0f0;\r\n                margin-right: 2rem;\r\n                font-size: 1.5rem;\r\n                font-family: \"Roboto\", Arial, Helvetica, sans-serif; \r\n                @media screen and (max-width: 640px) {\r\n                    font-size: 1.25rem; }\r\n            }\r\n        }\r\n        & .movie-info-4 {\r\n            width: 100%;\r\n                font-size: 2rem;\r\n                color: #f0f0f0;\r\n                font-family: \"Roboto\", Arial, Helvetica, sans-serif;\r\n                font-weight: 700;\r\n                margin-bottom: 1rem; \r\n                @media screen and (max-width: 640px) {\r\n                    font-size: 1.5rem; }\r\n        } \r\n        & .movie-info-5 {\r\n            width: 100%;\r\n                font-size: 1.5rem;\r\n                color: #f0f0f0;\r\n                font-family: \"Roboto\", Arial, Helvetica, sans-serif; \r\n                @media screen and (max-width: 640px) {\r\n                    font-size: 1.25rem; } \r\n        }\r\n`\r\n\r\nconst TVPage = ({match}) => {\r\n    const [state, setState] = useState({})\r\n\r\n    useEffect(() => {\r\n        axios.get(`https://api.themoviedb.org/3/tv/${match.params.id}?api_key=81d1f6291941e4cbb7818fa6c6be6f85&language=en-US`)\r\n        .then(resp => setState(resp.data))\r\n    }, [])\r\n\r\n    return (\r\n        <Wrapper>\r\n            <MovieContainer>\r\n                <MoviePoster>\r\n                    <img src={`https://image.tmdb.org/t/p/original/${state.poster_path}`} alt={state.name}/>\r\n                </MoviePoster>\r\n                <MovieInfo>\r\n                    <div className=\"movie-info-1\">\r\n                        <h1>{state.name}</h1>\r\n                    </div>\r\n                    <div className=\"movie-info-2\">\r\n                        <ListCheckbox idFor=\"want-to-see\">Want-To-See</ListCheckbox>\r\n                        <ListCheckbox idFor=\"seen-it\">Seen-It</ListCheckbox>\r\n                        <StyledButton inMoviePage><p>All My Lists</p></StyledButton>\r\n                    </div>\r\n                    <div className=\"movie-info-3\">\r\n                        <span>{state.vote_average * 10}%</span>\r\n                        <span>{state.genres === undefined ? '' : `${state.genres[0].name} - ${state.genres[1].name}`}</span>\r\n                        <span>{state.first_air_date}</span>\r\n                        <span>{state.episode_run_time === undefined ? '' : state.episode_run_time[0]} min per Episode</span>\r\n                    </div>\r\n                    <div className=\"movie-info-4\"><p>Overview</p></div>\r\n                    <div className=\"movie-info-5\"><p>{state.overview}</p></div>\r\n                </MovieInfo>\r\n            </MovieContainer>\r\n            <div></div>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default TVPage","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\ToastMessage.jsx",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\redux\\store.js",["123"],"import { applyMiddleware, createStore } from 'redux';\r\nimport { SHOW_TOAST_MESSAGE, SHOW_LOGIN_MODAL, GET_USER_DATA } from './actions';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nconst initialStore = {\r\n  toastMessageText: '',\r\n  loginModalVisibility: false,\r\n  user: undefined,\r\n};\r\n\r\nconst rootReducer = (state = initialStore, action) => {\r\n  console.log(action);\r\n  console.log(state);\r\n  if (action.type === GET_USER_DATA) {\r\n    return {\r\n      ...state,\r\n      user: action.user,\r\n    };\r\n  }\r\n  if (action.type === SHOW_TOAST_MESSAGE) {\r\n    return {\r\n      ...state,\r\n      toastMessageText: action.toastMessageText,\r\n    };\r\n  }\r\n  if (action.type === SHOW_LOGIN_MODAL) {\r\n    return {\r\n      ...state,\r\n      loginModalVisibility: action.loginModalVisibility,\r\n    };\r\n  } else {\r\n    return state;\r\n  }\r\n};\r\n\r\nexport default createStore(rootReducer, applyMiddleware(thunk));\r\n","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\redux\\actionCreators.js",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\redux\\actions.js",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MediaPage.jsx",["124","125"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\n\r\nimport { showToastMessage } from './redux/actionCreators';\r\nimport {connect} from 'react-redux'\r\n\r\nimport firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nimport StyledButton from './StyledButton'\r\nimport ListCheckbox from './ListCheckbox'\r\nimport MovieCard from './MovieCard'\r\nimport PersonCard from './PersonCard'\r\nimport Loader from './Loader'\r\n\r\nconst Wrapper = styled.main`\r\n    background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(4,4,56,1) 50%, rgba(0,117,140,1) 100%);\r\n    min-height: 70vh;\r\n`\r\n\r\nconst MovieContainer = styled.div`\r\n    padding: 5rem 10rem 5rem 10rem;\r\n    display: flex;\r\n    width: 100%; \r\n    @media screen and (max-width: 1024px) {\r\n        flex-wrap: wrap;\r\n        display: flex;\r\n        justify-content: center;  \r\n    }\r\n    @media screen and (max-width: 770px) {   \r\n        padding: 5rem 5rem 5rem 5rem; } \r\n    @media screen and (max-width: 640px) {\r\n        padding: 3rem 3rem 3rem 3rem; } \r\n    @media screen and (max-width: 640px) {\r\n        padding: 3rem 2rem 0rem 2rem; } \r\n`\r\n\r\nconst MoviePoster = styled.div`\r\n        width: 30%; \r\n        @media screen and (max-width: 1024px) {\r\n            height: 30rem;\r\n            width: 20rem; \r\n        }\r\n        & > img {\r\n            height: 100%;\r\n            width: 100%;\r\n            object-fit: cover;\r\n        }\r\n`\r\n\r\nconst MovieInfo = styled.div`\r\n        padding: 3rem;\r\n        width: 70%; \r\n        @media screen and (max-width: 1024px) {\r\n            width: 100%; }\r\n        & .movie-info-1 {\r\n            @media screen and (max-width: 1024px) {\r\n                    width: 100%;\r\n                    display: flex;\r\n                    justify-content: center; }\r\n            & h1 {\r\n                    color: #f0f0f0;\r\n                    font-family: \"Roboto\", Arial, Helvetica, sans-serif;\r\n                    font-size: 5rem;\r\n                    margin-bottom: 2rem; \r\n                    @media screen and (max-width: 1024px) {\r\n                        font-size: 4rem;\r\n                        margin-bottom: 1.5rem; }\r\n                    @media screen and (max-width: 640px) {\r\n                        font-size: 3rem; } \r\n            }\r\n        }\r\n        & .movie-info-2 {\r\n            width: 100%;\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            justify-content: space-between;\r\n            align-items: center;\r\n            margin-bottom: 2rem; }\r\n            @media screen and (max-width: 1024px) {\r\n                width: 100%;\r\n                display: flex;\r\n                flex-wrap: wrap;\r\n                justify-content: center; \r\n        }\r\n        & .movie-info-3 {\r\n            width: 100%;\r\n            display: flex;\r\n            flex-wrap: wrap;\r\n            margin-bottom: 2rem;\r\n            & span {\r\n                color: #f0f0f0;\r\n                margin-right: 2rem;\r\n                font-size: 1.5rem;\r\n                font-family: \"Roboto\", Arial, Helvetica, sans-serif; \r\n                @media screen and (max-width: 640px) {\r\n                    font-size: 1.25rem; }\r\n            }\r\n        }\r\n        & .movie-info-4 {\r\n            width: 100%;\r\n                font-size: 2rem;\r\n                color: #f0f0f0;\r\n                font-family: \"Roboto\", Arial, Helvetica, sans-serif;\r\n                font-weight: 700;\r\n                margin-bottom: 1rem; \r\n                @media screen and (max-width: 640px) {\r\n                    font-size: 1.5rem; }\r\n        } \r\n        & .movie-info-5 {\r\n            width: 100%;\r\n                font-size: 1.5rem;\r\n                color: #f0f0f0;\r\n                font-family: \"Roboto\", Arial, Helvetica, sans-serif; \r\n                @media screen and (max-width: 640px) {\r\n                    font-size: 1.25rem; } \r\n        }\r\n`\r\n\r\nconst ModalWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    background: radial-gradient(50% 50% at 50% 50%, #c4c4c4 0%, rgba(0, 0, 0, 0.833333) 0.01%, rgba(0, 0, 0, 0.92) 100%);\r\n    z-index: 100;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    display: none;\r\n    &.open {\r\n        display: flex;\r\n    }\r\n    & .modal {\r\n        width: 50%;\r\n        height: 80%;\r\n        background: #0a1016;\r\n        border-radius: 15px;\r\n        border: 1px solid #f0f0f0;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n        padding: 30px 0px;\r\n        overflow: auto;\r\n        @media screen and (max-width: 1024px) {\r\n            width: 90%;\r\n        }\r\n        &::-webkit-scrollbar-track {\r\n            box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n            -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n            border-radius: 10px;\r\n            background-color: #f5f5f5;\r\n        }\r\n\r\n        &::-webkit-scrollbar {\r\n            width: 6px;\r\n            height: 6px;\r\n            background-color: transparent;\r\n            float: top;\r\n        }\r\n\r\n        &::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n            -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n            background-color: #555;\r\n        } \r\n    }\r\n`\r\n\r\nconst RecommendationsWrapper = styled.div`\r\n    & .title {\r\n        width: 100%;\r\n        height: 8rem;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        padding-left: 5rem;\r\n        @media screen and (max-width: 640px){\r\n            height: 6rem;}\r\n        & h4 {\r\n            text-align: center;\r\n            padding: 0.5rem 0.5rem 0.5rem 0.5rem;\r\n            color: white;\r\n            font-family: \"Racing Sans One\", Arial, Helvetica, sans-serif;\r\n            font-size: 3rem;\r\n            @media screen and (max-width: 640px){\r\n            font-size: 2rem;}\r\n        }\r\n    }\r\n    & .billboard {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-wrap: wrap;\r\n    }\r\n`\r\n\r\nconst PeopleWrapper = styled.div`\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-wrap: wrap;\r\n        & .title {\r\n        width: 100%;\r\n        height: 8rem;\r\n        display: flex;\r\n        justify-content: flex-start;\r\n        align-items: center;\r\n        padding-left: 5rem;\r\n        @media screen and (max-width: 640px){\r\n            height: 6rem;}\r\n        & h4 {\r\n            text-align: center;\r\n            padding: 0.5rem 0.5rem 0.5rem 0.5rem;\r\n            color: white;\r\n            font-family: \"Racing Sans One\", Arial, Helvetica, sans-serif;\r\n            font-size: 3rem;\r\n            @media screen and (max-width: 640px){\r\n            font-size: 2rem;}\r\n        }\r\n    }\r\n`\r\n\r\nconst Slider = styled.div`\r\n    display: flex;\r\n    overflow-x: auto;\r\n    overflow-y: hidden;\r\n    margin: 30px 50px;\r\n    margin-top: 0;\r\n    @media screen and (max-width: 640px) {\r\n        margin: 20px;\r\n        margin-top: 0;\r\n    }\r\n    &::-webkit-scrollbar-track {\r\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        border-radius: 10px;\r\n        background-color: #f5f5f5;\r\n    }\r\n\r\n    &::-webkit-scrollbar {\r\n        width: 6px;\r\n        height: 6px;\r\n        background-color: transparent;\r\n        float: top;\r\n    }\r\n\r\n    &::-webkit-scrollbar-thumb {\r\n        border-radius: 10px;\r\n        box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n        background-color: #555;\r\n    }\r\n`\r\n\r\nconst MediaPage = ({match, user, toastMessage}) => {\r\n    const modal = useRef(null)\r\n\r\n    const [state, setState] = useState({})\r\n    const [rated, setRated] = useState()\r\n    const [recommendations, setRecommendations] = useState([])\r\n    const [cast, setCast] = useState([])\r\n    const [crew, setCrew] = useState([])\r\n    const [modalState, setModalState] = useState({\r\n        modalVisibility: false,\r\n    })\r\n    const [allMyListsState, setAllMyListsState] = useState([])\r\n\r\n    useEffect(() => {\r\n        const apiKey = '81d1f6291941e4cbb7818fa6c6be6f85'\r\n        if(match.params.mediaType === 'movie') {\r\n            axios.get(`https://api.themoviedb.org/3/movie/${match.params.id}?api_key=${apiKey}&language=en-US`)\r\n            .then(resp => setState(resp.data))\r\n            axios.get(`https://api.themoviedb.org/3/movie/${match.params.id}/release_dates?api_key=${apiKey}`)\r\n            .then(resp => resp.data.results.forEach((eachCountry) => {\r\n                if (eachCountry.iso_3166_1 === 'US') {\r\n                setRated(eachCountry.release_dates[0].certification)\r\n                }\r\n            }))\r\n            axios.get(`https://api.themoviedb.org/3/movie/${match.params.id}/recommendations?api_key=${apiKey}&language=en-US&page=1`)\r\n            .then(resp => setRecommendations(resp.data.results.slice(0, 7)))\r\n            axios.get(`https://api.themoviedb.org/3/movie/${match.params.id}/credits?api_key=${apiKey}&language=en-US`)\r\n            .then(resp => setCast(resp.data.cast.slice(0, 6)))\r\n            axios.get(`https://api.themoviedb.org/3/movie/${match.params.id}/credits?api_key=${apiKey}&language=en-US`)\r\n            .then(resp => setCrew(resp.data.crew))\r\n        }\r\n        if(match.params.mediaType === 'tv') {\r\n            axios.get(`https://api.themoviedb.org/3/tv/${match.params.id}?api_key=${apiKey}&language=en-US`)\r\n            .then(resp => setState(resp.data))\r\n            axios.get(`https://api.themoviedb.org/3/tv/${match.params.id}/recommendations?api_key=${apiKey}&language=en-US&page=1`)\r\n            .then(resp => setRecommendations(resp.data.results.slice(0, 7)))\r\n            axios.get(`https://api.themoviedb.org/3/tv/${match.params.id}/credits?api_key=${apiKey}&language=en-US`)\r\n            .then(resp => setCast(resp.data.cast.slice(0, 6)))\r\n            axios.get(`https://api.themoviedb.org/3/tv/${match.params.id}/credits?api_key=${apiKey}&language=en-US`)\r\n            .then(resp => setCrew(resp.data.crew))\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if(modalState.modalVisibility === true && mediaInfo.id !== undefined) {\r\n            modal.current.classList.add('open')\r\n        } else if (mediaInfo.id !== undefined) {\r\n            modal.current.classList.remove('open')\r\n        }\r\n        if(user !== undefined && user !== null) {\r\n            firebase\r\n            .firestore()\r\n            .collection('users')\r\n            .doc(user.uid)\r\n            .collection('lists')\r\n            .onSnapshot(function (querySnapshot) {\r\n            let lists = [];\r\n            querySnapshot.forEach(function (doc) {\r\n                lists.push(doc.id);\r\n            });\r\n            setAllMyListsState(lists)\r\n            });\r\n        }\r\n    },[modalState, user])\r\n    \r\n\r\n    let mediaInfo\r\n    if(match.params.mediaType === 'movie') {\r\n        mediaInfo = {\r\n            poster_path: state.poster_path,\r\n            title: state.title,\r\n            id: state.id,\r\n            release_date: state.release_date,\r\n        }\r\n    }\r\n    if(match.params.mediaType === 'tv') {\r\n        mediaInfo = {\r\n            poster_path: state.poster_path,\r\n            name: state.name,\r\n            id: state.id,\r\n            first_air_date: state.first_air_date,\r\n        }\r\n    }\r\n\r\n    let genres\r\n    if(state.genres !== undefined) {\r\n        if (state.genres[1] !== undefined) {\r\n            genres = `${state.genres[0].name} - ${state.genres[1].name}`\r\n        } else {\r\n            genres = `${state.genres[0].name}`\r\n        }\r\n    }\r\n\r\n    const openModal = () => {\r\n        setModalState({\r\n            ...modalState,\r\n            modalVisibility: true,\r\n        })\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setModalState({\r\n            ...modalState,\r\n            modalVisibility: false,\r\n        })\r\n    }\r\n\r\n    if (mediaInfo.id === undefined) {\r\n        return (\r\n            <>\r\n                <Wrapper>\r\n\r\n                </Wrapper>\r\n                <ModalWrapper className='open'>\r\n                    <Loader/>\r\n                </ModalWrapper>\r\n            </>\r\n        )\r\n    } else {\r\n        return (\r\n            <>\r\n            <Wrapper>\r\n                <MovieContainer>\r\n                    <MoviePoster>\r\n                        <img src={`https://image.tmdb.org/t/p/original/${state.poster_path}`} alt={match.params.mediaType === 'movie' ? state.title : state.name}/>\r\n                    </MoviePoster>\r\n                    <MovieInfo>\r\n                        <div className=\"movie-info-1\">\r\n                            <h1>{match.params.mediaType === 'movie' ? state.title : state.name}</h1>\r\n                        </div>\r\n                        <div className=\"movie-info-2\">\r\n                            <ListCheckbox firebaseListName={match.params.mediaType === 'movie' ? 'want-to-see-movies' : 'want-to-see-tv-shows'} mediaInfo={mediaInfo}>Want-To-See</ListCheckbox>\r\n                            <ListCheckbox firebaseListName={match.params.mediaType === 'movie' ? 'seen-it-movies' : 'seen-it-tv-shows'} mediaInfo={mediaInfo}>Seen-It</ListCheckbox>\r\n                            {user === null \r\n                            ? <StyledButton inMoviePage styledOnClick={() => toastMessage('Login to use the lists')}><p>All My Lists</p></StyledButton>\r\n                            : <StyledButton inMoviePage styledOnClick={() => openModal()}><p>All My Lists</p></StyledButton>\r\n                            }\r\n                        </div>\r\n                        <div className=\"movie-info-3\">\r\n                            <span>{state.vote_average * 10}%</span>\r\n                            <span>{genres}</span>\r\n                            {rated === undefined ? '' : <span>{rated}</span>}\r\n                            <span>{match.params.mediaType === 'movie' ? state.release_date : state.first_air_date}</span>\r\n                            <span>{match.params.mediaType === 'movie' ? `${state.runtime} min` : `${state.episode_run_time[0]} min per Episode`}</span>\r\n                        </div>\r\n                        <div className=\"movie-info-4\"><p>Overview</p></div>\r\n                        <div className=\"movie-info-5\"><p>{state.overview}</p></div>\r\n                    </MovieInfo>\r\n                </MovieContainer>\r\n                <PeopleWrapper>\r\n                    <div className='title'>\r\n                        <h4>{'Cast & Crew >'}</h4>\r\n                    </div>\r\n                    <Slider>\r\n                    {crew.map(e =>\r\n                        e.job === 'Director' ? \r\n                        <PersonCard \r\n                            picture={e.profile_path}\r\n                            name={e.name}\r\n                            credit={e.job}\r\n                            key={e.credit_id} \r\n                        />\r\n                        : ''\r\n                        )}\r\n                    {cast.length === 0 ? 'No results' : cast.map(e =>\r\n                            <PersonCard \r\n                                picture={e.profile_path}\r\n                                name={e.name}\r\n                                credit={e.character}\r\n                                key={e.credit_id} \r\n                            />\r\n                        )}\r\n                    </Slider>\r\n                </PeopleWrapper>\r\n                <RecommendationsWrapper>\r\n                    <div className='title'>\r\n                        <h4>Recommendations ></h4>\r\n                    </div>\r\n                    <div className='billboard'>\r\n                        {/* No Results */}\r\n                        {/* Movie Cards */}\r\n                        {recommendations.length === 0 ? 'No results' : recommendations.map(e =>\r\n                            <MovieCard \r\n                                movieTitle={match.params.mediaType === 'movie' ? e.title : e.name} \r\n                                movieSrc={e.poster_path} \r\n                                movieYear={match.params.mediaType === 'movie' ? e.release_date.slice(0, 4) : e.first_air_date.slice(0, 4)}\r\n                                link={match.params.mediaType === 'movie' ? `/media/movie/${e.id}` : `/media/tv/${e.id}`}\r\n                                key={`${match.params.mediaType}-${e.id}`} \r\n                            />\r\n                        )}\r\n                    </div>\r\n                </RecommendationsWrapper>\r\n            </Wrapper>\r\n            <ModalWrapper onClick={() => closeModal()} ref={modal}>\r\n                <div className='modal' onClick={e => e.stopPropagation()}>\r\n                    {/* <ListCheckbox>Want-To-See</ListCheckbox> */}\r\n                    {match.params.mediaType === 'movie'\r\n                        ?\r\n                            allMyListsState.map(e =>\r\n                                e.endsWith('-movies') \r\n                                    ? \r\n                                        <ListCheckbox firebaseListName={e} key={e} mediaInfo={mediaInfo} inAllMyListsModal>\r\n                                            {e === 'want-to-see-movies' || e === 'seen-it-movies'\r\n                                                    ?\r\n                                                        e.slice(0, -7).replace(/-/g, ' ').replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase()).replace(/ /g, '-')\r\n                                                    :\r\n                                                        e.slice(0, -7)\r\n                                                }\r\n                                        </ListCheckbox>\r\n                                    : ''\r\n                            )\r\n                        : \r\n                            allMyListsState.map(e =>\r\n                                e.endsWith('-tv-shows') \r\n                                    ? \r\n                                        <ListCheckbox firebaseListName={e} key={e} mediaInfo={mediaInfo} inAllMyListsModal>\r\n                                            {e === 'want-to-see-tv-shows' || e === 'seen-it-tv-shows'\r\n                                                    ?\r\n                                                        e.slice(0, -9).replace(/-/g, ' ').replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase()).replace(/ /g, '-')\r\n                                                    :\r\n                                                        e.slice(0, -9)\r\n                                                }\r\n                                        </ListCheckbox>\r\n                                    : ''\r\n                            )\r\n                    }\r\n                    {}\r\n                </div>\r\n            </ModalWrapper>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return ({\r\n        user: state.user\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toastMessage(text) {\r\n        dispatch(showToastMessage(text))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MediaPage)","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\LoginModal.jsx",["126"],"import React, {useEffect, useRef, useState} from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport {faGoogle, faFacebookF} from '@fortawesome/free-brands-svg-icons'\r\n\r\nimport { showLoginModal, showToastMessage } from './redux/actionCreators';\r\nimport {connect} from 'react-redux'\r\n\r\nimport StyledButton from './StyledButton'\r\nimport Loader from './Loader'\r\n\r\nconst Wrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    background: radial-gradient(50% 50% at 50% 50%, #c4c4c4 0%, rgba(0, 0, 0, 0.833333) 0.01%, rgba(0, 0, 0, 0.92) 100%);\r\n    z-index: 100;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    display: none;\r\n    &.open {\r\n        display: flex;\r\n    }\r\n`\r\n\r\nconst Modal = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    //height: 70vh;\r\n    width: 60vw;\r\n    background-color: #090035;\r\n    border-radius: 10px;\r\n    border: 2px solid white;\r\n    color: white;\r\n    padding: 40px;\r\n    max-width: 650px;\r\n\r\n    @media screen and (max-width: 768px) {\r\n        padding: 40px 0px;\r\n    }\r\n    @media screen and (max-width: 640px) {\r\n        width: 80vw;\r\n    }\r\n\r\n    & h2 {\r\n        font-size: 38px;\r\n        margin-bottom: 20px;\r\n        @media screen and (max-width: 640px) {\r\n        font-size: 34px;\r\n        margin-bottom: 10px;\r\n        }\r\n    }\r\n\r\n    & form {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        width: 80%;\r\n\r\n        & label {\r\n            width: 100%;\r\n            font-size: 18px;\r\n            margin: 10px 0;\r\n            padding-left: 10px;\r\n        }\r\n\r\n        & input {\r\n            width: 100%;\r\n            height: 4rem;\r\n            font-size: 2rem;\r\n            font-family: \"Roboto\", Arial, Helvetica, sans-serif;\r\n            padding: 1rem;\r\n            background-color: #2c2c2c;\r\n            border: #f0f0f0 1px solid;\r\n            border-radius: 15px;\r\n            color: #f0f0f0;\r\n            outline: none;\r\n            @media screen and (max-width: 640px) {\r\n            font-size: 1.5rem;\r\n            }\r\n        }\r\n    }\r\n\r\n    & .forgot {\r\n        margin: 10px 0 30px 0;\r\n        font-size: 14px;\r\n        cursor: pointer;\r\n        text-decoration: underline;\r\n    }\r\n\r\n    & .buttons {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        width: 80%;\r\n        & .inLoginModal {\r\n            font-size: 20px;\r\n            width: 30%;\r\n            @media screen and (max-width: 640px) {\r\n            width: 40%;\r\n            }\r\n        }\r\n        &.register {\r\n            margin-top: 20px;\r\n        }\r\n    }\r\n\r\n    & h3 {\r\n        font-size: 24px;\r\n        margin: 30px 0;\r\n        @media screen and (max-width: 640px) {\r\n            font-size: 20px;\r\n        }\r\n    }\r\n\r\n    & .social-buttons {\r\n        display: flex;\r\n        justify-content: center;\r\n        width: 80%;\r\n        & button {\r\n            margin: 0 20px;\r\n            height: 70px;\r\n            width: 70px;\r\n            border-radius: 100%;\r\n            &:nth-of-type(1) {\r\n                background: #ea4335;\r\n                transition: all 0.4s;\r\n                &:hover {\r\n                    background: #ea4335b3;\r\n                    transition: all 0.4s;\r\n                }\r\n            }\r\n            &:nth-of-type(2) {\r\n                background: #4867aa;\r\n                transition: all 0.4s;\r\n                &:hover {\r\n                    background: #4867aaa3;\r\n                    transition: all 0.4s;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n`\r\n\r\nconst LoginModal = ({loginModalVisibility, loginModal, user, toastMessage}) => {\r\n    const login = (result) => {\r\n        firebase.firestore().collection('users').doc(result.user.uid).collection('lists').doc('want-to-see-movies').get()\r\n                .then(function (doc) {\r\n                    if (doc.exists) {\r\n                        console.log('successful login')\r\n                        toastMessage('Login successful!')\r\n                    } else {\r\n                        const userInfo = {\r\n                            name: result.user.displayName,\r\n                            email: result.user.email,\r\n                            uid: result.user.uid,\r\n                            provider: result.user.providerData[0].providerId,\r\n                          };\r\n                          firebase.firestore().collection('users').doc(result.user.uid).collection('lists').doc('want-to-see-movies').set({list: []});\r\n                          firebase.firestore().collection('users').doc(result.user.uid).collection('lists').doc('seen-it-movies').set({list: []});\r\n                          firebase.firestore().collection('users').doc(result.user.uid).collection('lists').doc('want-to-see-tv-shows').set({list: []});\r\n                          firebase.firestore().collection('users').doc(result.user.uid).collection('lists').doc('seen-it-tv-shows').set({list: []});\r\n                          firebase.firestore().collection('users').doc(result.user.uid).collection('user').doc('info').set(userInfo);\r\n                          console.log('1st login successful')\r\n                          toastMessage('First Ever Login Successful!')\r\n                    }\r\n                setState({\r\n                    ...state,\r\n                    loader: false,\r\n                    verifiyEmailMessageVisibility: false,\r\n                    })\r\n                loginModal(false)\r\n            }).catch((error) => {\r\n                console.log(error)\r\n                toastMessage(error)\r\n            });\r\n    }\r\n\r\n    const loginMethod = (method, email, password, name) => {\r\n        // Se muestra Modal-Cargando\r\n        setState({\r\n            ...state,\r\n            loader: true,\r\n            })\r\n        const googleProvider = new firebase.auth.GoogleAuthProvider();\r\n\r\n        if(method === 'google') {\r\n            firebase.auth()\r\n            .signInWithPopup(googleProvider)\r\n            .then((result) => {\r\n                login(result)\r\n        }).catch((error) => {\r\n            console.log(error)\r\n            toastMessage(error)\r\n        });\r\n        }\r\n        if(method === 'signUpWithEmail') {\r\n            // Petición de Crear usuario con Email y Contraseña\r\n            firebase.auth().createUserWithEmailAndPassword(email, password)\r\n            .then((result) => {\r\n              // Si se crea correctamente el usuario:\r\n              // Que se actualice su displayName\r\n              result.user.updateProfile({\r\n                displayName: name,\r\n              });\r\n              const configuration = {\r\n                url: 'http://localhost:3000/',\r\n              };\r\n              // Enviar email de verificación con un link a configuration.url\r\n              result.user.sendEmailVerification(configuration);\r\n              // Se le cierra la sesión\r\n              firebase.auth().signOut();\r\n              // Se oculta el Modal-Cargando.\r\n              // Se muestra el mensaje de Verifica tu correo\r\n              toastMessage('Please verify your email')\r\n              // Se muestra el Login-Form (se oculta el Register-Form)\r\n              setState({\r\n                ...state,\r\n                loader: false,\r\n                verifiyEmailMessageVisibility: true,\r\n                registerVisibility: false,\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                console.log(error.code, error.message)\r\n                toastMessage(error.code, error.message)\r\n                setState({\r\n                    ...state,\r\n                    loader: false,\r\n                    })\r\n              // ..\r\n            });\r\n        }\r\n        if(method === 'loginWithEmail') {\r\n            // Petición de Iniciar sesión\r\n            firebase.auth().signInWithEmailAndPassword(email, password)\r\n            .then((result) => {\r\n                // Si el usuario existe y su email está verificado \r\n                if(result.user.emailVerified) {\r\n                    login(result)\r\n                } \r\n                // Si el usuario existe pero su email no está verificado\r\n                else {\r\n                    //firebase.auth().signOut();\r\n                    toastMessage('Please verify your email')\r\n                    login(result)\r\n                    setState({\r\n                        ...state,\r\n                        loader: false,\r\n                        })\r\n                }\r\n            })\r\n            // Si el usuario no existe o hay otro tipo de error. \r\n            .catch((error) => {\r\n                console.log(error.code, error.message)\r\n                toastMessage(error.code, error.message)\r\n                setState({\r\n                    ...state,\r\n                    loader: false,\r\n                    })\r\n            });\r\n        }        \r\n    }\r\n\r\n    const forgotYourPassword = () => {\r\n        firebase.auth().sendPasswordResetEmail(loginEmailInput.current.value).then(function() {\r\n        // Email sent.\r\n        toastMessage('Email sent')\r\n        }).catch(function(error) {\r\n        // An error happened.\r\n        toastMessage('Please insert your email')\r\n        console.log(error)\r\n        });\r\n    }\r\n\r\n    const modal = useRef(null);\r\n    const loginEmailInput = useRef(null)\r\n    const loginPassInput = useRef(null)\r\n    const signUpEmailInput = useRef(null)\r\n    const signUpPassInput = useRef(null)\r\n    const signUpNameInput = useRef(null)\r\n\r\n    const [state, setState] = useState({\r\n        registerVisibility: false,\r\n        verifiyEmailMessageVisibility: false,\r\n        loader: false,\r\n    })\r\n\r\n    useEffect(() => {\r\n        //loginModal(true)\r\n        if(loginModalVisibility === true) {\r\n            modal.current.classList.add('open')\r\n        } else {\r\n            modal.current.classList.remove('open')\r\n        }\r\n    }, [modal, loginModalVisibility])\r\n\r\n    const closeModal = (e) => {\r\n        if(signUpPassInput.current !== null) {\r\n            signUpPassInput.current.value = ''\r\n        }\r\n        if(loginPassInput.current !== null) {\r\n            loginPassInput.current.value = ''\r\n        }\r\n        /* if(signUpNameInput.current !== null) {\r\n            signUpNameInput.current.value = ''\r\n        } */\r\n        loginModal(false)\r\n        setState({\r\n            ...state,\r\n            registerVisibility: false,\r\n        })\r\n    }\r\n\r\n    const showRegisterForm = () => {\r\n        setState({\r\n            ...state,\r\n            registerVisibility: true,\r\n        })\r\n    }\r\n\r\n    if(state.loader === false) {\r\n        return (\r\n            <Wrapper onClick={(e) => closeModal(e)} ref={modal}>\r\n                <Modal onClick={e => e.stopPropagation()}>\r\n                    {state.registerVisibility \r\n                        ?\r\n                            <>\r\n                                <h2>Register</h2>\r\n                                <form>\r\n                                    <label htmlFor=\"\">Email</label>\r\n                                    <input type=\"email\" placeholder=\"Insert your email\" ref={signUpEmailInput}/>\r\n                                    <label htmlFor=\"\">Password</label>\r\n                                    <input type=\"password\" placeholder=\"Insert your password\" ref={signUpPassInput}/>\r\n                                    <label htmlFor=\"\">Name</label>\r\n                                    <input type=\"text\" placeholder=\"Insert your name\" ref={signUpNameInput}/>\r\n                                </form>\r\n                                <div className=\"buttons register\">\r\n                                    <div></div>\r\n                                    <StyledButton inLoginModal styledOnClick={() => loginMethod(\r\n                                        'signUpWithEmail', \r\n                                        signUpEmailInput.current.value, \r\n                                        signUpPassInput.current.value, \r\n                                        signUpNameInput.current.value)\r\n                                    }>\r\n                                            Sign up\r\n                                    </StyledButton>\r\n                                </div>\r\n                            </>\r\n                        :\r\n                            <>\r\n                                <h2>Login</h2>\r\n                                {state.verifiyEmailMessageVisibility\r\n                                    ? 'Verify your email'\r\n                                    : ''\r\n                                }\r\n                                <form>\r\n                                    <label htmlFor=\"\">Email</label>\r\n                                    <input type=\"email\" placeholder=\"Insert your email\" ref={loginEmailInput}/>\r\n                                    <label htmlFor=\"\">Password</label>\r\n                                    <input type=\"password\" placeholder=\"Insert your password\" ref={loginPassInput}/>\r\n                                </form>\r\n                                <div className=\"forgot\" onClick={() => forgotYourPassword()}>Forgot your password?</div>\r\n                                <div className=\"buttons\">\r\n                                    <StyledButton inLoginModal secondary styledOnClick={() => showRegisterForm()}>\r\n                                        Sign up\r\n                                    </StyledButton>\r\n                                    <StyledButton inLoginModal styledOnClick={() => loginMethod('loginWithEmail', loginEmailInput.current.value, loginPassInput.current.value)}>\r\n                                        Login\r\n                                    </StyledButton>\r\n                                </div>\r\n                                <h3>Sign up or login using ></h3>\r\n                                <div className=\"social-buttons\">\r\n                                    <StyledButton styledOnClick={() => loginMethod('google')}>\r\n                                        <FontAwesomeIcon size=\"3x\" icon={faGoogle}/>\r\n                                    </StyledButton>\r\n                                    {/* <StyledButton styledOnClick={() => loginMethod('facebook')}>\r\n                                        <FontAwesomeIcon size=\"3x\" icon={faFacebookF}/>\r\n                                    </StyledButton> */}\r\n                                </div>\r\n                            </>\r\n                    }\r\n                    \r\n                </Modal>\r\n            </Wrapper>\r\n        )\r\n    } else {\r\n        return (\r\n            <Wrapper>\r\n                <div style={{color: 'white'}}>\r\n                    <Loader/>\r\n                </div>\r\n            </Wrapper>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    if(state !== undefined) {\r\n        return (\r\n            {\r\n                user: state.user,\r\n                loginModalVisibility: state.loginModalVisibility\r\n            }\r\n        )\r\n    } else {\r\n        return {}\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    loginModal(text) {\r\n        dispatch(showLoginModal(text))\r\n    },\r\n    toastMessage(text) {\r\n        dispatch(showToastMessage(text))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginModal)","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MyUser.jsx",["127","128"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nimport { showToastMessage } from './redux/actionCreators';\r\nimport {connect} from 'react-redux'\r\n\r\nimport StyledButton from './StyledButton'\r\nimport Loader from './Loader'\r\n\r\nconst Wrapper = styled.main`\r\n    background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(4,4,56,1) 50%, rgba(0,117,140,1) 100%);\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    min-height: 80vh;\r\n`\r\n\r\nconst MyUserContainer = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-direction: column;\r\n    width: 50rem;\r\n    @media screen and (max-width: 640px) {\r\n        width: 90%;\r\n    }\r\n    & > * {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    height: 8rem;\r\n    color: white;\r\n    }\r\n    & div h2 {\r\n        font-size: 4rem;\r\n    }\r\n    & form {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        width: 100%;\r\n\r\n        & label {\r\n            width: 100%;\r\n            font-size: 18px;\r\n            margin: 10px 0;\r\n            padding-left: 10px;\r\n        }\r\n\r\n        & input {\r\n            width: 100%;\r\n            height: 4rem;\r\n            font-size: 2rem;\r\n            font-family: \"Roboto\", Arial, Helvetica, sans-serif;\r\n            padding: 1rem;\r\n            background-color: #2c2c2c;\r\n            border: #f0f0f0 1px solid;\r\n            border-radius: 15px;\r\n            color: #f0f0f0;\r\n            outline: none;\r\n            @media screen and (max-width: 640px) {\r\n            font-size: 1.5rem;\r\n            }\r\n        }\r\n    }\r\n    & .buttons {\r\n        display: flex;\r\n        justify-content: space-between;\r\n        & .inMyUserPage {\r\n            width: 30%;\r\n            font-size: 16px;\r\n            @media screen and (max-width: 640px) {\r\n            font-size: 14px;\r\n            }\r\n        }\r\n        & .inLoginModal {\r\n            width: 40%;\r\n            font-size: 20px;\r\n            @media screen and (max-width: 640px) {\r\n            font-size: 16px;\r\n            }\r\n        }\r\n    }\r\n    & .user-info {\r\n        display: flex;\r\n        align-items: flex-start;\r\n        flex-direction: column;\r\n        height: auto;\r\n        & > * {\r\n            margin: 5px 0;\r\n            font-size: 2rem;\r\n            @media screen and (max-width: 640px) {\r\n            font-size: 1.5rem;\r\n            }\r\n        }\r\n        & .title {\r\n            font-weight: 700;\r\n        }\r\n    }\r\n`\r\n\r\nconst MyUser = ({user, toastMessage}) => {\r\n    \r\n    const changeNameInput = useRef(null);\r\n\r\n    const signOut = () => {\r\n        window.location.pathname = '/'\r\n        firebase.auth().signOut()\r\n        toastMessage('Sign out successful!')\r\n    }\r\n\r\n    const changePassword = () => {\r\n        firebase.auth()\r\n        .sendPasswordResetEmail(user.email)\r\n        .then(function () {\r\n          // Email sent.\r\n          toastMessage('Check your email to change your password.');\r\n        })\r\n        .catch(function (error) {\r\n          // An error happened.\r\n          console.log(error);\r\n          toastMessage(`Error: ${error}`);\r\n        });        \r\n    }\r\n\r\n    const changeName = () => {\r\n        if(changeNameInput.current.value !== '') {\r\n            firebase.auth().currentUser.updateProfile({\r\n                displayName: changeNameInput.current.value.trim(),\r\n              }).then(function() {\r\n                // Update successful.\r\n                toastMessage('Update name successful')\r\n              }).catch(function(error) {\r\n                // An error happened.\r\n                toastMessage(error)\r\n              });   \r\n        } else {\r\n            toastMessage('Insert something')\r\n        }\r\n    }\r\n\r\n    if(user !== null) {\r\n        return (\r\n            <Wrapper>\r\n                <MyUserContainer>\r\n                    <div>\r\n                        <h2>Edit user</h2>\r\n                    </div>\r\n                    <form>\r\n                        <label htmlFor=\"\">Name</label>\r\n                        <input type=\"text\" placeholder=\"Insert your name\" ref={changeNameInput}/>\r\n                    </form>\r\n                    <div className='buttons'>\r\n                        <div></div>\r\n                        <StyledButton inMyUserPage styledOnClick={() => changeName()}>\r\n                            Save changes\r\n                        </StyledButton>\r\n                    </div>\r\n                    <div className='buttons'>\r\n                        <StyledButton inLoginModal secondary styledOnClick={() => signOut()}>\r\n                            Sign out\r\n                        </StyledButton>\r\n                        <StyledButton inLoginModal styledOnClick={() => changePassword()}>\r\n                            Change password\r\n                        </StyledButton>\r\n                    </div>\r\n                    <div className='user-info'>\r\n                        <p className='title'>Email:</p>\r\n                        <p>{user !== undefined ? user.email : 'Cargando...'}</p>\r\n                        <p className='title'>Name:</p>\r\n                        <p>{user !== undefined ? user.displayName : 'Cargando...'}</p>\r\n                    </div>\r\n                </MyUserContainer>\r\n            </Wrapper>\r\n        )\r\n    } else {\r\n        return (\r\n            <Wrapper>\r\n                <Loader/>\r\n                {/* <div>  User not logged  </div>\r\n                <div>  Loging out  </div> */}\r\n            </Wrapper>\r\n        )\r\n    }\r\n    \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return ({\r\n        user: state.user\r\n    })\r\n}\r\nconst mapDispatchToProps = dispatch => ({\r\n    toastMessage(text) {\r\n        dispatch(showToastMessage(text))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyUser)","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\MyLists.jsx",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\ListPage.jsx",["129"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport styled from 'styled-components'\r\n\r\nimport firebase from 'firebase';\r\nimport 'firebase/firestore';\r\nimport 'firebase/auth';\r\n\r\nimport { showToastMessage } from './redux/actionCreators';\r\nimport {connect} from 'react-redux'\r\n\r\nimport StyledButton from './StyledButton'\r\nimport MovieCard from './MovieCard'\r\n\r\nconst Wrapper = styled.main`\r\n    min-height: 70vh;\r\n    width: 100%;\r\n    background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(4,4,56,1) 50%, rgba(0,117,140,1) 100%);    \r\n`\r\n\r\nconst BillboardContainer = styled.div``\r\n\r\nconst BillboardTitle = styled.div`\r\n    width: 100%;\r\n    height: 8rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @media screen and (max-width: 640px) {\r\n        height: 6rem;\r\n    }\r\n    & h4 {\r\n        text-align: center;\r\n        padding: 0.5rem 0.5rem 0.5rem 0.5rem;\r\n        color: white;\r\n        font-family: \"Racing Sans One\", Arial, Helvetica, sans-serif;\r\n        font-size: 3rem;\r\n        @media screen and (max-width: 640px) {\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n`\r\n\r\nconst BillboardButtons = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    @media screen and (max-width: 400px) {\r\n        flex-wrap: wrap;\r\n    }\r\n    & .inListPage {\r\n        width: 30%;\r\n        min-height: 4.5rem;\r\n        margin: 2rem;\r\n        @media screen and (max-width: 640px) {\r\n            min-height: 3rem;\r\n        }\r\n        @media screen and (max-width: 400px) {\r\n            width: 15rem;\r\n            margin: 1rem;\r\n        }\r\n        & p {\r\n            font-size: 1.75rem;\r\n            margin: 0 2rem 0 2rem;\r\n            @media screen and (max-width: 640px) {\r\n                font-size: 1.5rem;\r\n            }\r\n            @media screen and (max-width: 400px) {\r\n                font-size: 1.25rem;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst Billboard = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n    & .no-results {\r\n        width: 100%;\r\n        height: 8rem;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        @media screen and (max-width: 640px) {\r\n            height: 6rem;\r\n        }\r\n        & div {\r\n            height: 6rem;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            background-color: #0099ff;\r\n            border-radius: 15px;\r\n            outline: none;\r\n            border: 0px;\r\n            @media screen and (max-width: 640px) {\r\n                height: 4rem;\r\n            }\r\n            & p {\r\n                font-family: \"Racing Sans One\", Arial, Helvetica, sans-serif;\r\n                color: white;\r\n                font-size: 2rem;\r\n                margin: 0 2rem 0 2rem;\r\n                @media screen and (max-width: 640px) {\r\n                    font-siZe: 2rem;\r\n                }\r\n                @media screen and (max-width: 400px) {\r\n                    font-siZe: 1.75rem;\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst LoadMore = styled.div`\r\n    width: 100%;\r\n    height: 12rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @media screen and (max-width: 640px) {\r\n        height: 8rem;\r\n    }\r\n    & .loadMore {\r\n        min-height: 6rem;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border-radius: 15px;\r\n        outline: none;\r\n        cursor: pointer;\r\n        border: 0px;\r\n        @media screen and (max-width: 640px) {\r\n            min-height: 4rem;\r\n        }\r\n        & > p {\r\n            font-size: 2rem;\r\n            margin: 0 2rem 0 2rem;\r\n            @media screen and (max-width: 400px) {\r\n                font-size: 1.75rem;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst ModalWrapper = styled.div`\r\n    width: 100vw;\r\n    height: 100vh;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    background: radial-gradient(50% 50% at 50% 50%, #c4c4c4 0%, rgba(0, 0, 0, 0.833333) 0.01%, rgba(0, 0, 0, 0.92) 100%);\r\n    z-index: 100;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    display: none;\r\n    &.open {\r\n        display: flex;\r\n    }\r\n\r\n    & .edit-modal {\r\n        display: flex;\r\n        align-items: center;\r\n        justify-content: center;\r\n        flex-direction: column;\r\n        //height: 70vh;\r\n        width: 60vw;\r\n        background-color: #090035;\r\n        border-radius: 10px;\r\n        border: 2px solid white;\r\n        color: white;\r\n        padding: 40px;\r\n        max-width: 650px;\r\n        @media screen and (max-width: 768px) {\r\n            padding: 40px 0px;\r\n        }\r\n        @media screen and (max-width: 640px) {\r\n            width: 80vw;\r\n        }\r\n        & .title, & form {\r\n            width: 80%;\r\n        }\r\n        & .title h2 {\r\n            font-size: 4rem;\r\n            margin: 4rem 0 2rem 0;\r\n            @media screen and (max-width: 400px) {\r\n                font-size: 2rem;\r\n            }\r\n            @media screen and (max-width: 640px) {\r\n                font-size: 3rem;\r\n            }\r\n        }\r\n        & form {\r\n            display: flex;\r\n            flex-direction: column;\r\n            margin-bottom: 4rem;\r\n            & label {\r\n                height: 3rem;\r\n                font-size: 2rem;\r\n                font-family: \"Roboto\", Arial, Helvetica, sans-serif;\r\n                padding: 0.5rem;\r\n                color: #f0f0f0;\r\n                margin-bottom: 0.5rem;\r\n                @media screen and (max-width: 400px) {\r\n                    font-size: 1.5rem;\r\n                }   \r\n            }\r\n            & input {\r\n                height: 4rem;\r\n                font-size: 2rem;\r\n                font-family: \"Roboto\", Arial, Helvetica, sans-serif;\r\n                padding: 1rem;\r\n                background-color: #2c2c2c;\r\n                border: #f0f0f0 1px solid;\r\n                border-radius: 15px;\r\n                color: #f0f0f0;\r\n                outline: none;\r\n                @media screen and (max-width: 400px) {\r\n                    font-size: 1.5rem;\r\n                }\r\n            }\r\n        }\r\n        & .btn-delete {\r\n            display: flex;\r\n            & > * {\r\n                margin: 0 20px;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst ListPage = ({user, match, toastMessage}) => {\r\n\r\n    const billboard = useRef(null)\r\n    const listnameInput = useRef(null)\r\n    const modal = useRef(null)\r\n\r\n    const mediaType = match.params.list.endsWith('-movies') ? 'movie' : 'tv'\r\n\r\n    const [state, setState] = useState([])\r\n    const [modalState, setModalState] = useState({\r\n        deleteVisibility: false,\r\n        modalVisibility: false,\r\n    })\r\n    const [lengthState, setLengthState] = useState({\r\n        emptyList: undefined,\r\n        listLength: undefined,\r\n        showedMovies: 20,\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(user !== undefined && user !== null) {\r\n            firebase\r\n            .firestore()\r\n            .collection('users')\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection('lists')\r\n            .doc(match.params.list)\r\n            .onSnapshot(function (doc) {\r\n                if (doc.data().list.length === 0) {\r\n                    setLengthState({\r\n                        ...lengthState,\r\n                        emptyList: true,\r\n                    })\r\n                } else {\r\n                    setLengthState({\r\n                        ...lengthState,\r\n                        listLength: doc.data().list.length\r\n                    })\r\n                    setState(\r\n                        doc.data().list\r\n                    )\r\n                }\r\n            })\r\n        }\r\n        if(modalState.modalVisibility === true) {\r\n            modal.current.classList.add('open')\r\n        } else {\r\n            modal.current.classList.remove('open')\r\n        }\r\n    }, [user, modalState])\r\n    \r\n    const loadMoreMovies = (preShowedMovies) => {\r\n        setLengthState({\r\n            ...lengthState,\r\n            showedMovies: preShowedMovies + 20\r\n        })\r\n    }\r\n\r\n    const openModal = (method) => {\r\n        if(method === 'delete') {\r\n            setModalState({\r\n                ...modalState,\r\n                deleteVisibility: true,\r\n                modalVisibility: true,\r\n            })\r\n        } else {\r\n            setModalState({\r\n                ...modalState,\r\n                deleteVisibility: false,\r\n                modalVisibility: true,\r\n            })\r\n        }\r\n    }\r\n\r\n    const closeModal = () => {\r\n        setModalState({\r\n            ...modalState,\r\n            deleteVisibility: false,\r\n            modalVisibility: false,\r\n        })\r\n    }\r\n\r\n    const editListname = () => {\r\n\r\n        let newName\r\n        if(match.params.list.endsWith('-movies')){\r\n            newName = listnameInput.current.value+'-movies'\r\n        } else {\r\n            newName = listnameInput.current.value+'-tv-shows'\r\n        }\r\n\r\n        let listSelectedData = [];\r\n\r\n        const input = listnameInput.current\r\n        const pattern = new RegExp('^[A-Za-z0-9 ]+$', 'i');\r\n        if (!pattern.test(input.value)) {\r\n            toastMessage('You can use only letters, numbers and spaces in the Listname');\r\n        } else {\r\n            // We obtain information from listSelected and store it in listSelectedData\r\n            firebase\r\n            .firestore()\r\n            .collection('users')\r\n            .doc(firebase.auth().currentUser.uid)\r\n            .collection('lists')\r\n            .doc(match.params.list)\r\n            .get()\r\n            .then(function (doc) {\r\n                if (doc.exists) {\r\n                listSelectedData = doc.data().list;\r\n                const array = { list: listSelectedData };\r\n                let docRef = firebase\r\n                    .firestore()\r\n                    .collection('users')\r\n                    .doc(firebase.auth().currentUser.uid)\r\n                    .collection('lists')\r\n                    .doc(newName);\r\n                docRef\r\n                    .get()\r\n                    .then(function (doc) {\r\n                    if (doc.exists) {\r\n                        console.log('There is already a list created with that name');\r\n                        toastMessage('There is already a list created with that name');\r\n                    } else {\r\n                        docRef.set(array);\r\n                        firebase\r\n                        .firestore()\r\n                        .collection('users')\r\n                        .doc(firebase.auth().currentUser.uid)\r\n                        .collection('lists')\r\n                        .doc(match.params.list)\r\n                        .delete()\r\n                        .then(function () {\r\n                            console.log('List successfully deleted!');\r\n                            toastMessage('Listname changed!');\r\n                            window.location.pathname = `/list/${newName}`\r\n                        })\r\n                        .catch(function (error) {\r\n                            toastMessage('error removing the list', error)\r\n                            console.error('Error removing document: ', error);\r\n                        });\r\n                    }\r\n                    })\r\n                    .catch(function (error) {\r\n                        toastMessage(error)\r\n                    console.log('Error getting document:', error);\r\n                    });\r\n                } else {\r\n                // doc.data() will be undefined in this case\r\n                console.log('No such document!');\r\n                }\r\n            })\r\n            .catch(function (error) {\r\n                console.log('Error getting document:', error);\r\n            });\r\n        }\r\n    }\r\n\r\n    const deleteList = () => {\r\n        firebase\r\n        .firestore()\r\n        .collection('users')\r\n        .doc(firebase.auth().currentUser.uid)\r\n        .collection('lists')\r\n        .doc(match.params.list)\r\n        .delete()\r\n        .then(function () {\r\n        console.log('List successfully deleted!');\r\n        toastMessage('List successfully deleted!');\r\n        window.location.pathname = '/'\r\n        })\r\n        .catch(function (error) {\r\n        console.error('Error removing document: ', error);\r\n        })\r\n    }\r\n\r\n    return (\r\n    <>\r\n        <Wrapper>\r\n            <BillboardContainer>\r\n                <BillboardTitle>\r\n                    <h4>{match.params.list.endsWith('-movies')\r\n                        ? \r\n                            match.params.list === 'want-to-see-movies' || match.params.list === 'seen-it-movies'\r\n                                    ?\r\n                                        match.params.list.slice(0, -7).replace(/-/g, ' ').replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase()).replace(/ /g, '-')\r\n                                    :\r\n                                        match.params.list.slice(0, -7)\r\n                        : \r\n                            match.params.list === 'want-to-see-tv-shows' || match.params.list === 'seen-it-tv-shows'\r\n                                    ?\r\n                                        match.params.list.slice(0, -9).replace(/-/g, ' ').replace(/(^\\w{1})|(\\s+\\w{1})/g, letter => letter.toUpperCase()).replace(/ /g, '-')\r\n                                    :\r\n                                        match.params.list.slice(0, -9)\r\n                                            } ></h4>\r\n                </BillboardTitle>\r\n                {match.params.list === 'want-to-see-movies' || match.params.list === 'seen-it-movies' || match.params.list === 'want-to-see-tv-shows' || match.params.list === 'seen-it-tv-shows'\r\n                    ? '' \r\n                    :\r\n                        <BillboardButtons>\r\n                            <StyledButton inListPage styledOnClick={() => openModal('edit')} >\r\n                                <p>Edit listname</p>\r\n                            </StyledButton>\r\n                            <StyledButton inListPage styledOnClick={() => openModal('delete')}>\r\n                                <p>Delete list</p>\r\n                            </StyledButton>\r\n                        </BillboardButtons> \r\n                }\r\n            </BillboardContainer>\r\n            <Billboard ref={billboard} >\r\n                {lengthState.emptyList === true \r\n                    ? \r\n                        <div className='no-results'>\r\n                            <div>\r\n                                <p>No results found</p>\r\n                            </div>\r\n                        </div>\r\n                    : ''\r\n                }\r\n                {state.slice(0, lengthState.showedMovies).map(e =>\r\n                    <MovieCard \r\n                        movieTitle={mediaType === 'movie' ? e.title : e.name} \r\n                        movieSrc={e.poster_path} \r\n                        movieYear={mediaType === 'movie' ? e.release_date.slice(0, 4) : e.first_air_date.slice(0, 4)}\r\n                        link={mediaType === 'movie' ? `/media/movie/${e.id}` : `/media/tv/${e.id}`}\r\n                        key={`${mediaType}-${e.id}`} \r\n                    />\r\n                )}\r\n            </Billboard>\r\n            <LoadMore>\r\n                {lengthState.listLength > lengthState.showedMovies\r\n                    ?\r\n                        <StyledButton loadMore styledOnClick={() => loadMoreMovies(lengthState.showedMovies)}>\r\n                            <p>Load More ></p>\r\n                        </StyledButton>\r\n                    : ''\r\n                }\r\n            </LoadMore>\r\n        </Wrapper>\r\n        <ModalWrapper ref={modal} onClick={() => closeModal()}>\r\n                {modalState.deleteVisibility === true\r\n                    ? \r\n                        <div className='edit-modal' onClick={e => e.stopPropagation()}>\r\n                            <div className='title'>\r\n                                <h2>Are you sure?</h2>\r\n                            </div>\r\n                            <form className='description'>\r\n                                <label htmlFor=\"\">This list will be permanently removed.</label>\r\n                            </form>\r\n                            <div className='buttons btn-delete'>\r\n                                <StyledButton secondary styledOnClick={() => closeModal()}>\r\n                                    <p>No</p>\r\n                                </StyledButton>\r\n                                <StyledButton styledOnClick={() => deleteList()}>\r\n                                    <p>Yes</p>\r\n                                </StyledButton>\r\n                            </div>\r\n                        </div>\r\n                    : \r\n                        <div className='edit-modal' onClick={e => e.stopPropagation()}>\r\n                            <div className=\"title\">\r\n                                <h2>Edit listname</h2>\r\n                            </div>\r\n                            <form>\r\n                                <label htmlFor=\"\">List name:</label>\r\n                                <input type=\"text\" placeholder=\"Insert the new listname\" ref={listnameInput}/>\r\n                            </form>\r\n                            <div className=\"buttons\">\r\n                                <StyledButton styledOnClick={() => editListname()}>\r\n                                    <p>Save changes</p>\r\n                                </StyledButton>\r\n                            </div>\r\n                        </div>\r\n                }\r\n        </ModalWrapper>\r\n    </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return ({\r\n        user: state.user\r\n    })\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    toastMessage(text) {\r\n        dispatch(showToastMessage(text))\r\n    }\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListPage)","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\PersonCard.jsx",[],"C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\TheMovieDBListPage.jsx",["130","131"],"import React, {useState, useEffect, useRef} from 'react'\r\nimport styled from 'styled-components'\r\nimport axios from 'axios'\r\n\r\nimport {connect} from 'react-redux'\r\n\r\nimport StyledButton from './StyledButton'\r\nimport MovieCard from './MovieCard'\r\n\r\nconst Wrapper = styled.main`\r\n    min-height: 70vh;\r\n    width: 100%;\r\n    background: linear-gradient(90deg, rgba(2,0,36,1) 0%, rgba(4,4,56,1) 50%, rgba(0,117,140,1) 100%);    \r\n`\r\n\r\nconst BillboardContainer = styled.div``\r\n\r\nconst BillboardTitle = styled.div`\r\n    width: 100%;\r\n    height: 8rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @media screen and (max-width: 640px) {\r\n        height: 6rem;\r\n    }\r\n    & h4 {\r\n        text-align: center;\r\n        padding: 0.5rem 0.5rem 0.5rem 0.5rem;\r\n        color: white;\r\n        font-family: \"Racing Sans One\", Arial, Helvetica, sans-serif;\r\n        font-size: 3rem;\r\n        @media screen and (max-width: 640px) {\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n`\r\n\r\nconst Billboard = styled.div`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    flex-wrap: wrap;\r\n`\r\n\r\nconst LoadMore = styled.div`\r\n    width: 100%;\r\n    height: 12rem;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    @media screen and (max-width: 640px) {\r\n        height: 8rem;\r\n    }\r\n    & .loadMore {\r\n        min-height: 6rem;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border-radius: 15px;\r\n        outline: none;\r\n        cursor: pointer;\r\n        border: 0px;\r\n        @media screen and (max-width: 640px) {\r\n            min-height: 4rem;\r\n        }\r\n        & > p {\r\n            font-size: 2rem;\r\n            margin: 0 2rem 0 2rem;\r\n            @media screen and (max-width: 400px) {\r\n                font-size: 1.75rem;\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n// Ponete a pensar que solo hay posibilidad de 2: Trendings Page y Search Page.\r\n\r\nconst TheMovieDBListPage = ({match}) => {\r\n    const billboard = useRef(null)\r\n\r\n    const mediaType = match.params.mediaType === 'movie' ? 'movie' : 'tv'\r\n\r\n    const [state, setState] = useState([])\r\n    const [lengthState, setLengthState] = useState({\r\n        emptyList: undefined,\r\n        listLength: undefined,\r\n        showedMovies: 1,\r\n    })\r\n\r\n    useEffect(() => {\r\n        if(match.params.type === 'trending') {\r\n            axios.get(`https://api.themoviedb.org/3/trending/${mediaType}/week?api_key=81d1f6291941e4cbb7818fa6c6be6f85&page=${lengthState.showedMovies}`)\r\n            .then(resp => {\r\n                if (resp.data.total_pages === 0) {\r\n                    setLengthState({\r\n                        ...lengthState,\r\n                        emptyList: true,\r\n                    })\r\n                } else {\r\n                    setLengthState({\r\n                        ...lengthState,\r\n                        listLength: resp.data.total_pages,\r\n                    })\r\n                    setState(state.concat(resp.data.results))\r\n                }\r\n            })\r\n        }\r\n        if(match.params.type === 'search') {\r\n            axios.get(`https://api.themoviedb.org/3/search/${mediaType}?api_key=81d1f6291941e4cbb7818fa6c6be6f85&language=en-US&query=${match.params.searchValue}`)\r\n            .then(resp => {\r\n                if (resp.data.total_pages === 0) {\r\n                    setLengthState({\r\n                        ...lengthState,\r\n                        emptyList: true,\r\n                    })\r\n                } else {\r\n                    setLengthState({\r\n                        ...lengthState,\r\n                        listLength: resp.data.total_pages,\r\n                    })\r\n                    setState(state.concat(resp.data.results))\r\n                }\r\n            })\r\n        }\r\n    },[lengthState.showedMovies])\r\n\r\n    const loadMoreMovies = (preShowedMovies) => {\r\n        setLengthState({\r\n            ...lengthState,\r\n            showedMovies: preShowedMovies + 1\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Wrapper>\r\n            <BillboardContainer>\r\n                <BillboardTitle>\r\n                    <h4>{match.params.type === 'trending'\r\n                            ? \r\n                                match.params.mediaType === 'movie'\r\n                                    ? 'Trending Movies'\r\n                                    : 'Trending TV Shows'\r\n                            : `Found ${match.params.mediaType === 'movie' ? 'movies' : 'tv shows'} with '${match.params.searchValue.replace(/\\+/g,' ')}'`\r\n                        \r\n                        } ></h4>\r\n                </BillboardTitle>\r\n            </BillboardContainer>\r\n            <Billboard ref={billboard} >\r\n                {lengthState.emptyList === true \r\n                    ? 'Lista vacia'\r\n                    : ''\r\n                }\r\n                {state.map(e =>\r\n                    <MovieCard \r\n                        movieTitle={mediaType === 'movie' ? e.title : e.name} \r\n                        movieSrc={e.poster_path} \r\n                        movieYear={mediaType === 'movie' ? e.release_date.slice(0, 4) : e.first_air_date.slice(0, 4)}\r\n                        link={mediaType === 'movie' ? `/media/movie/${e.id}` : `/media/tv/${e.id}`}\r\n                        key={`${mediaType}-${e.id}`} \r\n                    />\r\n                )}\r\n            </Billboard>\r\n            <LoadMore>\r\n                {lengthState.listLength > lengthState.showedMovies\r\n                    ?\r\n                        <StyledButton loadMore styledOnClick={() => loadMoreMovies(lengthState.showedMovies)}>\r\n                            <p>Load More ></p>\r\n                        </StyledButton>\r\n                    : ''\r\n                }\r\n            </LoadMore>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default TheMovieDBListPage","C:\\Users\\fbecc\\Documents\\react-projects\\movies-project\\src\\Loader.jsx",[],{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"132","replacedBy":"136"},{"ruleId":"134","replacedBy":"137"},{"ruleId":"138","severity":1,"message":"139","line":84,"column":8,"nodeType":"140","endLine":84,"endColumn":49,"suggestions":"141"},{"ruleId":"142","severity":1,"message":"143","line":5,"column":8,"nodeType":"144","messageId":"145","endLine":5,"endColumn":16},{"ruleId":"142","severity":1,"message":"146","line":16,"column":42,"nodeType":"144","messageId":"145","endLine":16,"endColumn":54},{"ruleId":"142","severity":1,"message":"147","line":7,"column":7,"nodeType":"144","messageId":"145","endLine":7,"endColumn":28},{"ruleId":"138","severity":1,"message":"148","line":126,"column":8,"nodeType":"140","endLine":126,"endColumn":10,"suggestions":"149"},{"ruleId":"138","severity":1,"message":"150","line":106,"column":8,"nodeType":"140","endLine":106,"endColumn":14,"suggestions":"151"},{"ruleId":"138","severity":1,"message":"148","line":117,"column":8,"nodeType":"140","endLine":117,"endColumn":10,"suggestions":"152"},{"ruleId":"142","severity":1,"message":"143","line":5,"column":8,"nodeType":"144","messageId":"145","endLine":5,"endColumn":16},{"ruleId":"138","severity":1,"message":"153","line":301,"column":8,"nodeType":"140","endLine":301,"endColumn":10,"suggestions":"154"},{"ruleId":"138","severity":1,"message":"155","line":323,"column":7,"nodeType":"140","endLine":323,"endColumn":25,"suggestions":"156"},{"ruleId":"142","severity":1,"message":"157","line":9,"column":19,"nodeType":"144","messageId":"145","endLine":9,"endColumn":30},{"ruleId":"142","severity":1,"message":"158","line":1,"column":16,"nodeType":"144","messageId":"145","endLine":1,"endColumn":24},{"ruleId":"142","severity":1,"message":"159","line":1,"column":26,"nodeType":"144","messageId":"145","endLine":1,"endColumn":35},{"ruleId":"138","severity":1,"message":"160","line":283,"column":8,"nodeType":"140","endLine":283,"endColumn":26,"suggestions":"161"},{"ruleId":"142","severity":1,"message":"162","line":5,"column":9,"nodeType":"144","messageId":"145","endLine":5,"endColumn":16},{"ruleId":"138","severity":1,"message":"163","line":126,"column":7,"nodeType":"140","endLine":126,"endColumn":33,"suggestions":"164"},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],["165"],["166"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'firebaseDocId' and 'mediaType'. Either include them or remove the dependency array.","ArrayExpression",["167"],"no-unused-vars","'firebase' is defined but never used.","Identifier","unusedVar","'faSignOutAlt' is defined but never used.","'SEARCH_BOX_OPEN_WIDTH' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'match.params.id'. Either include it or remove the dependency array.",["168"],"React Hook useEffect has a missing dependency: 'getListListener'. Either include it or remove the dependency array.",["169"],["170"],"React Hook useEffect has missing dependencies: 'match.params.id' and 'match.params.mediaType'. Either include them or remove the dependency array.",["171"],"React Hook useEffect has a missing dependency: 'mediaInfo.id'. Either include it or remove the dependency array.",["172"],"'faFacebookF' is defined but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","React Hook useEffect has missing dependencies: 'lengthState' and 'match.params.list'. Either include them or remove the dependency array. You can also do a functional update 'setLengthState(l => ...)' if you only need 'lengthState' in the 'setLengthState' call.",["173"],"'connect' is defined but never used.","React Hook useEffect has missing dependencies: 'lengthState', 'match.params.searchValue', 'match.params.type', 'mediaType', and 'state'. Either include them or remove the dependency array. You can also do a functional update 'setLengthState(l => ...)' if you only need 'lengthState' in the 'setLengthState' call.",["174"],"no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"177","fix":"181"},{"desc":"182","fix":"183"},{"desc":"184","fix":"185"},{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},"Update the dependencies array to be: [firebaseDocId, mediaType, user]",{"range":"190","text":"191"},"Update the dependencies array to be: [match.params.id]",{"range":"192","text":"193"},"Update the dependencies array to be: [getListListener, user]",{"range":"194","text":"195"},{"range":"196","text":"193"},"Update the dependencies array to be: [match.params.id, match.params.mediaType]",{"range":"197","text":"198"},"Update the dependencies array to be: [mediaInfo.id, modalState, user]",{"range":"199","text":"200"},"Update the dependencies array to be: [user, modalState, match.params.list, lengthState]",{"range":"201","text":"202"},"Update the dependencies array to be: [lengthState, lengthState.showedMovies, match.params.searchValue, match.params.type, mediaType, state]",{"range":"203","text":"204"},[2577,2618],"[firebaseDocId, mediaType, user]",[4285,4287],"[match.params.id]",[2401,2407],"[getListListener, user]",[3862,3864],[10218,10220],"[match.params.id, match.params.mediaType]",[10946,10964],"[mediaInfo.id, modalState, user]",[7996,8014],"[user, modalState, match.params.list, lengthState]",[3825,3851],"[lengthState, lengthState.showedMovies, match.params.searchValue, match.params.type, mediaType, state]"]